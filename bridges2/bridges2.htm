Game characters feel real because they move.  Movement adds excitement to games and lends verisamilitude to the characters.  In this article we'll take a look at the <a href="http://www.cocos2d-iphone.org/">Cocos2d</a> library and how it supports programmatic animations in iPhone games.

This article is part of a series teaching you how to create iPhone games based on the open source game <a href="http://zgrossbart.github.com/bridges/">Seven Bridges</a>.  Make sure to check out the first article in the series <a href="http://mobile.smashingmagazine.com/2013/02/13/designing-open-source-iphone-game">Designing An Open-Source iPhone Game</a>.  You'll be pretty lose without it.

<h3>Simple actions</h3>

Cocos2d works with nodes and just about everything in a Cocos2d game derives from <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_node.html">CCNode</a></code>.  Nodes interact with actions to create movement on the screen.  You can create your own class extending <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_action.html">CCAction</a></code>, but Cocos2d provides almost every action you'd need.  

The basic Cocos2d actions can:

<ul>
    <li><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_hide.html">hide</a> and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_show.html">show</a></li>
    <li><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_flip_y.html">flip</a> and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_rotate_by.html">rotate</a></li>
    <li><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_fade_to.html">fade</a> and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_tint_to.html">tint</a></li>
    <li>...and a lot more</a>
</ul>

We'll start by looking at the simple action <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_blink.html">CCBlink</a></code>.

<code>CCBlink</code> does just what it says and makes a node blink between visible and invisible.  Before we can start using an action we'll need a node.  We'll start with the <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/PlayerNode.mm">PlayerNode</a></code> from the game.

The player node is a simple one.  It shows the player <!-- player icon goes here --> and handles moving and animating the player around the screen.  <code>PlayerNode</code> isn't actually a <code>CCNode</code>, but it contains a <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_sprite.html">CCSprite</a></code> which represents a single image.  

Creating our player node is easy.  It just needs a color and a <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/LayerMgr.mm">LayerManager</a></code>.  The <code>LayerManager</code> is a helper object which lets the player interact with the world around it.  You don't need a <code>LayerManager</code>, but it gives you a simple place to add some standard code.

Let's create a new player and place him on the screen.

<pre class="brush: javascript">
PlayerNode* player = [[PlayerNode alloc] initWithColor:cBlack layerMgr:_layerMgr];
player.player.position = ccp(100, 100);
</pre>

The <code>PlayerNode</code> is a helper object which contains the sprite.  It makes it available as a property named <code>player</code> which has a property named <code>position</code>.  

The blink action can run directly on the player sprite since it's also a <code>CCNode</code> which implements the <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_node.html#a5d6d868cc1a0ba72820a055b05661aa5">runAction</a></code> method.  It works like this:

<pre class="brush: javascript">
CCBlink* blink = [CCBlink actionWithDuration:10 blinks:5];
[player.player runAction:blink];
</pre>

Most actions define a static <code>actionWithDuration</code> method which creates a new object.  <code>CCBlink</code> takes a duration and the number of times it should blink.  We can apply whatever actions we want to the node just by passing them to the <code>runAction</code> method.

<h3>Running multiple actions</h3>

When the player runs into a teleporter <!-- insert image of teleporter here --> they should look like they're jumping into it.  To create that effect we'll combine three actions: <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_rotate_by.html">rotation</a>, <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_fade_to.html">fading</a>, and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_scale_to.html">scaling</a>.  Each of these actions takes a little time to run and we can make them all run simultaneously.  Put them together and it looks like the player is spinning and fading out while he shrinks.

<pre class="brush: javascript">
[player.player runAction:[CCRotateBy actionWithDuration:0.5 angle:360]];
[player.player runAction:[CCFadeTo actionWithDuration:0.5 opacity:0.0]];
[player.player runAction:[CCScaleTo actionWithDuration:0.5 scale:0.25]];
</pre>

<code>CCRotateBy</code> rotates the player from their current position by a specified number of degrees.  In this case we want a full circle so we rotate by 360 degrees.

<code>CCFadeTo</code> changes the player's opacity to the specified value.  We want the player to disappear completely so we fade to 0.0.

<code>CCScaleTo</code> causes the player to grow or shrink to the specified scaling factor.  We want to player to shrink as they enter the teleporter so we scale them down to one quarter of the default size.

These actions take a duration just like <code>CCBlink</code>.  By specifying the duration as the same for each action we cause all three of them to run at the same time.  Playing them all together looks like this:

<!-- video of the teleport jump in goes here -->

<h3>Combining actions in sequences</h3>

Rotating and fading is cool, but let's take it up a notch by actually changing the dimensions of the object instead of just the size.  The Houses and Colors level introduecs houses <!-- house image goes here --> to visit.  You have to visit each house to beat the level.  Seven Bridges provides a visual indication that the house is visited by turning it gray, but we want to all a little animation to draw your eye to it and make the game a little more interactive.

Houses work with <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/HouseNode.mm">HouseNode</a></code> which is an object similar to <code>PlayerNode</code>.  They're both helper objects which contain a sprite that draws the object and handle the interactions.  <code>PlayerNode</code> exposes the player sprite in a property called <code>player</code> and <code>HouseNode</code> expose the house sprite in a property called <code>house</code>.

The house visiting animation flips the house horizontally while turning it gray.  To flip the house back and forth we need two separate actions which run sequentially.  The first action flips the house to the right and the second action flips it back again.

The spinning, shrinking, fading player used three animations which ran at the same time.  The house needs more control.  To space them out we'll use a new object called <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_sequence.html">CCSequence</a></code>.  Sequences string together actions which run one after the other.

The first step is to create out two actions:

<pre class="brush: javascript">
float scale = 1.0;
CCEaseExponentialIn* flipHalf = [CCEaseExponentialIn 
    actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:-scale to:0.0]];
    
CCEaseExponentialOut* flipRemainingHalf = [CCEaseExponentialOut 
    actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:0.0 to:scale]];
</pre>

Cocos2d provides a series of special actions which provide easing.  They all derive from <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_action_ease.html">CCEase</a></code>.  These actions provide simple access to some of the basic movement animations which make objects bounce and slide into each other with a more natural movement.  These same techniques are used on the web for <a href="http://coding.smashingmagazine.com/2011/10/04/quick-look-math-animations-javascript/">JavaScript animations</a>.

<code>CCEaseExponentialIn</code> and <code>CCEaseExponentialOut</code> provide natural movement in and out of various positions using and exponential curve.  This animation combines that with <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_action_tween.html">CCTween</a></code> which can apply changes to any property of a node.  We change the <code>scaleX</code> property to start the rotation.

Confused yet?

There's a lot of math here, but the basic concepts are pretty simple.  The first animation causes the house to get smaller horizontally along the X axis.  This squishes the house together until it disappears.  The second animation cause the house to get larger along the X axis which pulls the house apart from zero to the full width.  When you put them together the house looks like it's rotating.  

Let's create our house and run the animations together with a sequence like this:

<pre class="brush: javascript">
HouseNode *houseNode = [[HouseNode alloc] initWithColorAndCoins:cBlack layerMgr:layerMgr coins:0];

CCSequence* seq = [CCSequence actions:flipHalf, flipRemainingHalf, nil];
[house runAction:seq];
</pre>

The <code>CCSequence</code> takes a series of actions and runs them on after the other.  The last argument is the optional selector to a method to run when all the actions are complete.  We don't need any notification so we just pass it <code>nil</code>.

<h3>Combining actions with custom code</h3>

This sequence will flip the house, but we also want to turn it gray <!-- gray house picture goes here -->.  Cocos2d provides special actions for tinting, but we want a high quailty image for the gray house so we'll use a PNG file.  There isn't any action to replace a sprite's image with another so we need a little custom code.  Cocos2d provides ultimate flexibility with the <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_call_func.html">CCCallFunc</a></code> action which sits inside a sequence and calls any code you want.  

The first step to using <code>CCCallFunc</code> is to write the function you want to call.  The house turns gray when the visit is over so we'll call our function <code>visitEnded</code> and define it on <code>HouseNode</code> like this:

<pre class="brush: javascript">
-(void)visitEnded {
    CCSpriteFrameCache* cache = [CCSpriteFrameCache sharedSpriteFrameCache];
    CCSpriteFrame* frame;
    frame = [cache spriteFrameByName:@"house_gray.png"];
    [self.house setDisplayFrame:frame];
}
</pre>

We already have a gray house icon so the <code>visitEnded</code> function gets that icon from the sprite cache and sets into into our <code>house</code> sprite.  Now we just need to tweak our sequence to call <code>visitEnded</code> in the middle of the animation.  We want to combine all of this together to we'll create a new method on the <code>HouseNode</code> called <code>visit</code>.

<pre class="brush: javascript">
-(void) visit {
    float scale = 1.0;
    CCEaseExponentialIn* flipHalf = [CCEaseExponentialIn 
        actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:-scale to:0.0]];
        
    CCEaseExponentialOut* flipRemainingHalf = [CCEaseExponentialOut 
        actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:0.0 to:scale]];
        
    CCSequence* seq = [CCSequence actions:flipHalf,
                      [CCCallFunc actionWithTarget:self selector:@selector(visitEnded)],
                      flipRemainingHalf, nil];
                      
    [self.house runAction:seq];
}
</pre>

This new sequence will squish the house down, call the <code>visitEnded</code> function to turn the house gray, and stretch the house back out.  

<!-- video of house animation goes here -->

Cocos2d provides a series of actions for calling custom code which can pass arguments and call methods on other objects.  Combing out of the box animations with custom code creates and ideal environment for complex animations.

<h3>Combining multiple animations into particles</h3>

We've looked at simple animations and some more complex interactions, now let's get really fancy with particles.  Cocos2d provides a set of more complex animations which all start with  <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_particle_system.html">CCParticleSystem</a></code>.

Particle systems provide very flexible precanned animations which combine nodes.  They're awesome, complex, and poorly documented.

When you beat a level of Seven Bridges we give you a little reward with a group of star shaped confetti that spin and float across the screen.  We add whimsy to those stars with some randomness and pull it all together with a particle system called <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_particle_rain.html">CCParticleRain</a></code>.  

<!-- stars animation goes here -->

So... um... There's no way to ease into this one.  Here's a really big chunk of code:

<pre class="brush: javascript">
-(void) showConfetti: (float) x y:(float) y
{
    self.emitter = [[CCParticleRain alloc] init];
    [self.emitter setScaleX:0.5];
    [self.emitter setScaleY:0.5];
    
    [self.emitter resetSystem];
    self.emitter.texture = [[CCTextureCache sharedTextureCache] addImage:@"confetti.png"];
    
    self.emitter.duration = 1.5;
    
    // gravity
    self.emitter.gravity = ccp(self.player.player.position.x, 90);
    
    // angle
    self.emitter.angle = 90;
    self.emitter.angleVar = 360;
    
    // speed of particles
    self.emitter.speed = 160;
    self.emitter.speedVar = 20;
    
    // radial
    self.emitter.radialAccel = -120;
    self.emitter.radialAccelVar = 120;
    
    // tagential
    self.emitter.tangentialAccel = 30;
    self.emitter.tangentialAccelVar = 60;
    
    // life of particles
    self.emitter.life = 1;
    self.emitter.lifeVar = 4;
    
    // spin of particles
    self.emitter.startSpin = 15;
    self.emitter.startSpinVar = 5;
    self.emitter.endSpin = 360;
    self.emitter.endSpinVar = 180;
    
    // color of particles
    ccColor4F startColor = {171.0f, 26.0f, 37.0f, 1.0f};
    self.emitter.startColor = startColor;
    ccColor4F startColorVar = {245.0f, 255.f, 72.0f, 1.0f};
    self.emitter.startColorVar = startColorVar;
    ccColor4F endColor = {255.0f, 223.0f, 85.0f, 1.0f};
    self.emitter.endColor = endColor;
    ccColor4F endColorVar = {255.0f, 131.0f, 62.0f, 1.0f};
    self.emitter.endColorVar = endColorVar;
    
    
    // size, in pixels
    self.emitter.startSize = 50.0f;
    self.emitter.startSizeVar = 20.0f;
    self.emitter.endSize = kParticleStartSizeEqualToEndSize;
    
    // emits per second
    self.emitter.totalParticles = 250;
    self.emitter.emissionRate = self.emitter.totalParticles/self.emitter.life;
    
    self.emitter.posVar = ccp(x + 20, y - 20);
    
    self.emitter.blendAdditive = NO;
    
    self.emitter.position = ccp(x,y);
    
    // run the particle emitter
    [self addChild: self.emitter z:10];
    self.emitter.autoRemoveOnFinish = YES;
    
    // call the doWon function when the particle system completes
    [self scheduleOnce:@selector(doWon) delay:3];
}
</pre>

This code comes from the <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/LevelLayer.mm">LevelLayer</a></code> which controls the players interactions with the play screen.  When the player wins the level we call the <code>showConfetti</code> method and pass in the current player location.

The particle sysem starts with a single image <!-- star image goes here -->, creates hundreds of instances of that image, and moves those instances across the screen while changing their size, color, rotation, and speed.  

Most of this code just sets up the <code>CCParticleRain</code> and tells it how to behave.  Particle system are very flexible and that means they support many different configuration properties.  These properties aren't vary well documented and I found most of them by looking in the Cocos2d source code.  

Particle systems acheive a natural look by adding random variability.  You control the range of the randomness with <code>var</code> properties.  For example, we want the stars to start out between 20 and 50 times their regular size so we specify a <code>startSize</code> property of <code>50.0f</code> and a <code>startSizeVar</code> property of <code>20.0f</code>.  This means each of the stars will start somewhere between these two values.

<h3>Create your own animations</h3>

Now that you've seen some of the basic concepts in Cocos2d animations you can create your own.  An easy place to start is by changing Seven Bridges.  Just <a href="https://github.com/zgrossbart/bridges">download the source code</a> and start tweaking it.

Add a blink animation to make the player character blink while he moves.  Take a look at the <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/PlayerNode.mm">PlayerNode</a></code> to see the sequence for moving the player across the screen.  Play with the particle emitter to change the way the stars work.

This article reviewed programmatic animations in games, but Cocos2d also supports sprite based animations.  These animations play a series of images to create an animation.  Kind of like a <a href="http://en.wikipedia.org/wiki/Flip_book">flip book</a>.  Seven Bridges uses that style of animation when moving the player around the screen.  

Ray Wenderlich has an awesome tutorial sprite based animation called <a href="http://www.raywenderlich.com/1271/how-to-use-animations-and-sprite-sheets-in-cocos2d">How To Use Animations and Sprite Sheets in Cocos2D</a>.  The article is excellent, but it mentions a product called Zwoptex and I strongly recomment <a href="http://www.codeandweb.com/texturepacker">TexturePacker</a> instead.

And make sure to check out <a href="http://zgrossbart.github.com/bridges/">Seven Bridges</a> and buy a copy for yourself.
