Animation makes games real.  Movement adds excitement to the game and lends verisimilitude to the characters.  In this article we'll take a look at the <a href="http://www.cocos2d-iphone.org/">Cocos2d</a> library and how it supports programmatic animations in iPhone games.

This article is part of a series teaching you how to create iPhone games based on the open source game <a href="http://zgrossbart.github.com/bridges/">Seven Bridges</a>.  Make sure to check out the first article in the series <a href="http://mobile.smashingmagazine.com/2013/02/13/designing-open-source-iphone-game">Designing An Open-Source iPhone Game</a>.  

This article will walk through the animation basics.  We'll take a look at actions in Cocos2d and see how to combine them together to create complex and custom effects.  

<h3>Simple actions</h3>

Cocos2d works with nodes and just about everything in a Cocos2d game derives from <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_node.html">CCNode</a></code>.  Nodes interact with actions that extend <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_action.html">CCAction</a></code> to create movement on the screen.  

The basic Cocos2d actions can:

<ul>
    <li><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_hide.html">hide</a> and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_show.html">show</a></li>
    <li><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_flip_y.html">flip</a> and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_rotate_by.html">rotate</a></li>
    <li><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_fade_to.html">fade</a> and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_tint_to.html">tint</a></li>
    <li>...and a lot more</a>
</ul>

We'll start by looking at the simple action <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_blink.html">CCBlink</a></code>.  Seven Bridges doesn't use blink, but it's on of the easiest actions to understand.

Before we can start using any action we'll need a node.  We'll start with the <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/PlayerNode.mm">PlayerNode</a></code> from Seven Bridges.

The player node is a simple one.  It shows the player sprite <img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/player.png" alt="The player icon" width="20" height="20" class="alignnone size-full wp-image-134527" style="margin:0;" /> and handles moving and animating the player around the screen.  <code>PlayerNode</code> isn't actually a <code>CCNode</code>, but it contains a <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_sprite.html">CCSprite</a></code> which represents a single image and extends <code>CCNode</code>.  

Our player node needs a color and a <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/LayerMgr.mm">LayerManager</a></code>.  The <code>LayerManager</code> is a helper object in Seven Bridges which lets game nodes interact with the world around them.  You don't need a <code>LayerManager</code>, but it gives you a simple place to add some standard code.

Let's create a new player and place him on the screen.

<pre class="brush: javascript">
PlayerNode* player = [[PlayerNode alloc] initWithColor:cBlack layerMgr:_layerMgr];
player.player.position = ccp(100, 100);
</pre>

The <code>PlayerNode</code> contains the sprite pointer and uses the layer manager to add the sprite to the scene.  It makes the sprite available as a property named <code>player</code> which has a property named <code>position</code>.  The full code for creating the <code>LayerManager</code> is in <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/LevelLayer.mm">LevelLayer</a></code>.

The blink action can run directly on the player sprite since sprites are also <code>CCNode</code> objects which implement the <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_node.html#a5d6d868cc1a0ba72820a055b05661aa5">runAction</a></code> method.  It works like this:

<pre class="brush: javascript">
CCBlink* blink = [CCBlink actionWithDuration:10 blinks:5];
[player.player runAction:blink];
</pre>

Most actions define a static <code>actionWithDuration</code> method which creates a new action object.  <code>CCBlink</code> takes a duration and the number of times it should blink.  We can apply whatever actions we like to the node just by passing them to the <code>runAction</code> method.

<h3>Running multiple actions</h3>

The latest version of Seven Bridges introduces teleporters <img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/teleport.png" alt="Teleporter icon" width="20" height="26" class="alignnone size-full wp-image-134528" style="margin: 0;" />.  When the player runs into a teleporter they should look like they're jumping into it.  To create that effect we'll combine three actions: <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_rotate_by.html">rotating</a>, <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_fade_to.html">fading</a>, and <a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_scale_to.html">scaling</a>.  Each of these actions takes a little time to run and we can make them all run simultaneously.  Put them together and it looks like the player is spinning and disappearing while he shrinks.

<pre class="brush: javascript">
[player.player runAction:[CCRotateBy actionWithDuration:0.5 angle:360]];
[player.player runAction:[CCFadeTo actionWithDuration:0.5 opacity:0.0]];
[player.player runAction:[CCScaleTo actionWithDuration:0.5 scale:0.25]];
</pre>

<code>CCRotateBy</code> rotates the player from the current position by a specified number of degrees.  In this case we want a full circle so we rotate by 360 degrees.

<code>CCFadeTo</code> changes the player's opacity to the specified value.  We want the player to disappear completely so we fade to <code>0.0</code>.

<code>CCScaleTo</code> causes the player to grow or shrink to the specified scaling factor.  We want the player to shrink as they enter the teleporter so we scale them down to one quarter of the default size.

These actions take a duration just like <code>CCBlink</code>.  By specifying the duration as the same for each action we cause all three of them to run at the same time.  Playing them all together looks like this:

<a href="https://vimeo.com/60320015"><img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/teleport_vid.jpg" alt="Teleport video" width="449" height="225" class="aligncenter size-full wp-image-134659" /></a>

<h3>Combining actions in sequences</h3>

Rotating and fading is cool, but let's take it up a notch by actually changing the dimensions of the sprite instead of just the size.  The Houses and Colors map introduces houses <img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/house.png" alt="House icon" width="20" height="20" class="alignnone size-full wp-image-134530" style="margin: 0;" /> you have to visit.  When you visit a house we turn it gray with a little flourish.

Houses are renderred by an object similar to <code>PlayerNode</code> named <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/HouseNode.mm">HouseNode</a></code>.  They're both helper objects which contain a sprite and handle the interactions.  <code>PlayerNode</code> exposes the player sprite in a property called <code>player</code> and <code>HouseNode</code> expose the house sprite in a property called <code>house</code>.

The house visiting animation flips the house horizontally while turning it gray.  To flip the house back and forth we run two actions sequentially.  The first action flips the house to the right and the second action flips it back to the left.

The spinning, shrinking, fading player used three animations which ran at the same time.  The house needs more control.  To space them out we'll use a new object called <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_sequence.html">CCSequence</a></code>.  Sequences string together actions which run one after the other.

We'll start by creating our two actions:

<pre class="brush: javascript">
float scale = 1.0;
CCEaseExponentialIn* flipHalf = [CCEaseExponentialIn 
    actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:-scale to:0.0]];
    
CCEaseExponentialOut* flipRemainingHalf = [CCEaseExponentialOut 
    actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:0.0 to:scale]];
</pre>

Cocos2d provides a series of special actions which provide easing.  They all derive from <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_action_ease.html">CCEase</a></code>.  These actions provide simple access to some of the basic movement animations which make objects bounce and slide into each other with a more natural movement.  These same techniques are used on the web for <a href="http://coding.smashingmagazine.com/2011/10/04/quick-look-math-animations-javascript/">JavaScript animations</a>.

<code>CCEaseExponentialIn</code> and <code>CCEaseExponentialOut</code> provide natural movement in and out of various positions using an exponential curve.  This animation combines that with <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_action_tween.html">CCTween</a></code> which can apply changes to any property of a node.  We change the <code>scaleX</code> property to start the rotation.

Confused yet?

There's a lot of math here, but the basic concepts are pretty simple.  The first animation causes the house to get smaller horizontally along the X axis.  This squishes the house together until it disappears.  The second animation pull the house apart from zero to the full width.  When you put them together the house looks like it's rotating.  

Let's create our house and run the animations together with a sequence like this:

<pre class="brush: javascript">
HouseNode *houseNode = [[HouseNode alloc] initWithColorAndCoins:cBlack layerMgr:layerMgr coins:0];

CCSequence* seq = [CCSequence actions:flipHalf, flipRemainingHalf, nil];
[house runAction:seq];
</pre>

The <code>CCSequence</code> takes a series of actions and runs them one after the other.  The last argument is the optional selector to a method to call when all the actions are complete.  We don't need any notification so we just pass it <code>nil</code>.

<h3>Combining actions with custom code</h3>

This sequence will flip the house, but we also want to turn it gray <img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/house_gray.png" alt="Gray house icon" width="20" height="20" class="alignnone size-full wp-image-134531" style="margin: 0;" />.  Cocos2d provides special actions for tinting, but we want a high quality image for the gray house so we'll use a PNG file.  None of the default actions replace a sprite's image so we need a little custom code.  Cocos2d provides ultimate flexibility with the <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_call_func.html">CCCallFunc</a></code> action which sits inside a sequence and calls any code you want.  

The house turns gray when the visit ends so we'll create a new function called <code>visitEnded</code> and define it on <code>HouseNode</code> like this:

<pre class="brush: javascript">
-(void)visitEnded {
    CCSpriteFrameCache* cache = [CCSpriteFrameCache sharedSpriteFrameCache];
    CCSpriteFrame* frame;
    frame = [cache spriteFrameByName:@"house_gray.png"];
    [self.house setDisplayFrame:frame];
}
</pre>

We already have a gray house icon so the <code>visitEnded</code> function gets that icon from the sprite cache and sets it into our <code>house</code> sprite.  Now we just need to tweak our sequence to call <code>visitEnded</code> in the middle of the animation.  This code is getting a little complicated to we'll add it to a new method on <code>HouseNode</code> and call it <code>visit</code>.

<pre class="brush: javascript">
-(void) visit {
    float scale = 1.0;
    CCEaseExponentialIn* flipHalf = [CCEaseExponentialIn 
        actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:-scale to:0.0]];
        
    CCEaseExponentialOut* flipRemainingHalf = [CCEaseExponentialOut 
        actionWithAction:[CCActionTween actionWithDuration:0.25 key:@"scaleX" from:0.0 to:scale]];
        
    CCSequence* seq = [CCSequence actions:flipHalf,
                      [CCCallFunc actionWithTarget:self selector:@selector(visitEnded)],
                      flipRemainingHalf, nil];
                      
    [self.house runAction:seq];
}
</pre>

This new sequence will squish the house down, call the <code>visitEnded</code> method with <code>CCCallFunc</code> to turn the house gray, and stretch the house back out.  

<a href="https://vimeo.com/60319771"><img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/house_vid.jpg" alt="House animation video" width="449" height="225" class="aligncenter size-full wp-image-134660" /></a>

Cocos2d provides a series of actions for calling custom code like <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_call_func_n.html">CCCallFuncN</a></code> and <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_call_block.html">CCCallBlock</a></code>.  They're also variations of calling custom code during sequenecs.  Combining out of the box animations with custom code creates and ideal environment for complex animations.

<h3>Combining multiple animations into particle systems</h3>

We've looked at simple animations and some more complex interactions, now let's get fancy with particles.  Cocos2d provides a set of more complex animations which all start with <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_particle_system.html">CCParticleSystem</a></code>.

Particle systems aren't actions.  They use actions to create flexible precanned animations.  They're awesome, complex, and poorly documented.  Particle systems work well for mimicking natural phenomina like rain or smoke.

When you beat a level of Seven Bridges we give you a little reward with a group of star shaped confetti that spin and float across the screen.  We add whimsy to those stars with some randomness and pull it all together with a particle system called <code><a href="http://www.cocos2d-iphone.org/api-ref/2.1.0/interface_c_c_particle_rain.html">CCParticleRain</a></code>.  

<a href="https://vimeo.com/60320148"><img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/stars_vid.jpg" alt="Stars animation video" width="448" height="319" class="aligncenter size-full wp-image-134661" /></a>

So... um... There's no way to ease into this one.  Here's a really big chunk of code:

<pre class="brush: javascript">
-(void) showConfetti: (float) x y:(float) y {
    self.emitter = [[CCParticleRain alloc] init];
    [self.emitter setScaleX:0.5];
    [self.emitter setScaleY:0.5];
    
    [self.emitter resetSystem];
    self.emitter.texture = [[CCTextureCache sharedTextureCache] addImage:@"confetti.png"];
    
    self.emitter.duration = 1.5;
    
    // Set the gravity effect for the stars
    self.emitter.gravity = ccp(self.player.player.position.x, 90);
    
    // Specify the angle of the stars
    self.emitter.angle = 90;
    self.emitter.angleVar = 360;
    
    // The speed the particles will use when floating
    self.emitter.speed = 160;
    self.emitter.speedVar = 20;
    
    // The radial variable
    self.emitter.radialAccel = -120;
    self.emitter.radialAccelVar = 120;
    
    // The tangential variable
    self.emitter.tangentialAccel = 30;
    self.emitter.tangentialAccelVar = 60;
    
    // How long each star should last before fading out
    self.emitter.life = 1;
    self.emitter.lifeVar = 4;
    
    // How much each star should spin
    self.emitter.startSpin = 15;
    self.emitter.startSpinVar = 5;
    self.emitter.endSpin = 360;
    self.emitter.endSpinVar = 180;
    
    // The color of the stars as RGB values
    ccColor4F startColor = {171.0f, 26.0f, 37.0f, 1.0f};
    self.emitter.startColor = startColor;
    ccColor4F startColorVar = {245.0f, 255.f, 72.0f, 1.0f};
    self.emitter.startColorVar = startColorVar;
    ccColor4F endColor = {255.0f, 223.0f, 85.0f, 1.0f};
    self.emitter.endColor = endColor;
    ccColor4F endColorVar = {255.0f, 131.0f, 62.0f, 1.0f};
    self.emitter.endColorVar = endColorVar;
    
    
    // The size of each of the stars
    self.emitter.startSize = 50.0f;
    self.emitter.startSizeVar = 20.0f;
    self.emitter.endSize = kParticleStartSizeEqualToEndSize;
    
    // The rate new stars will be created
    self.emitter.totalParticles = 250;
    self.emitter.emissionRate = self.emitter.totalParticles/self.emitter.life;
    
    self.emitter.posVar = ccp(x + 20, y - 20);
    
    self.emitter.blendAdditive = NO;
    
    self.emitter.position = ccp(x,y);
    
    // run the particle emitter
    [self addChild: self.emitter z:10];
    self.emitter.autoRemoveOnFinish = YES;
    
    // call the doWon function when the particle system completes
    [self scheduleOnce:@selector(doWon) delay:3];
}
</pre>

This code comes from the <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/LevelLayer.mm">LevelLayer</a></code> which controls the players interactions with the play screen.  When the player wins the level we call the <code>showConfetti</code> method and pass in the current player location.

The particle system starts with a single image <img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/confetti.png" alt="Star confetti icon" width="25" height="25" class="alignnone size-full wp-image-134529" style="margin: 0;" />, creates hundreds of instances of that image, and moves those instances across the screen while changing their size, color, rotation and speed.  

Most of this code just sets up the <code>CCParticleRain</code> and tells it how to behave.  Particle system are very flexible and support a dizzying array of configuration properties.  These properties aren't well documented and I found most of them by looking in the Cocos2d source code.  

Particle systems achieve a natural look by adding random variability.  You control the range of the randomness with <code>var</code> properties.  For example, we want the stars to start out between 20 and 50 times their regular size so we specify a <code>startSize</code> property of <code>50.0f</code> and a <code>startSizeVar</code> property of <code>20.0f</code>.  This means each of the stars will start somewhere between these two values.

<h3>Create your own animations</h3>

Now that you've seen some of the basic concepts in Cocos2d animations you can create your own.  An easy place to start is by changing Seven Bridges.  Just <a href="https://github.com/zgrossbart/bridges">download the source code</a> and start tweaking it.

Add a blink animation to make the player character blink while he moves.  Take a look at the <code><a href="https://github.com/zgrossbart/bridges/blob/master/bridges2/PlayerNode.mm">PlayerNode</a></code> to see the sequence for moving the player across the screen.  Play with the particle emitter to change the way the stars work.

This article reviewed programmatic animations in games, but Cocos2d also supports sprite based animations.  These animations play a series of images to create the illusion of movement.  Kind of like a <a href="http://en.wikipedia.org/wiki/Flip_book">flip book</a>.  Seven Bridges uses that style of animation when moving the player around the screen.  

<img src="http://mmobile.smashingmagazine.com/wp-content/uploads/2013/02/player_movement.png" alt="Player movement animation" width="200" height="68" class="aligncenter size-full wp-image-134542" />

Ray Wenderlich has an awesome tutorial sprite based animation called <a href="http://www.raywenderlich.com/1271/how-to-use-animations-and-sprite-sheets-in-cocos2d">How To Use Animations and Sprite Sheets in Cocos2D</a>.  The article is excellent, but it mentions a product called Zwoptex and I strongly recommend <a href="http://www.codeandweb.com/texturepacker">TexturePacker</a> instead.

And make sure to check out <a href="http://zgrossbart.github.com/bridges/">Seven Bridges</a> and buy a copy for iPhone or iPad.
