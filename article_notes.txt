Love the grid
Why good code matters
Why JavaScript sucks and what you can do about it
The magic of JSLint
JavaScript's dark corners
Why people like strongly typed languages - I love my compiler
  
Build secure web applications

native vs. HTML5 native apps
When you should write a native mobile app and when you shouldn't

Why I love the Google Closure Compiler

Common cryoptography - http://coding.smashingmagazine.com/2011/10/04/quick-look-math-animations-javascript/
  SSL
  Storing passwords
  VPN
  
Backpack algorithms and public key cryptography made easy
    Where you're already using public key cryptography - SSL, GitHub, SSH
    One-time pads and basic encryption
    Backpack algorithms and the basics of public keys
    RSA and other public key encryption
    Secrets in the real world
    
An engineer's guide to UX
My love affair with Robert Bringhurst
The accidental designer
        �Don't try to be original, just try to be good.� -Paul Rand
        Steal from two places and you'll make something original
        

Watch out for nifty
        Why design is so hard for engineers
        Good design makes engineering look too easy
        The best UI for a shovel is a hole
        Type really matters
        
        
When I was a little engineer I dreamed of growing up and writing compilers and database drivers.  I'm an accidental designer.  

Stateless security models


The need for speed
        Loading fast vs. running fast
        Finding problems
                Isolate
                Create a baseline
                Eliminate variations
        Using timers
        Avoiding complex selectors
        Tools that make your page load faster
                PageSpeed
                YSlow
        Tools that make your page run faster
                SpeedTracer
                
        Dynamic content vs. static content
                CDNs
                
http://stackoverflow.com/questions/1094760/network-tools-that-simulate-slow-network-connection

From paper to prototype to code

Sculpting water - Changing dev culture at build time and commit time.  

Software development needs good process and fails under stupid process.  A good process disappears from your daily life (tabs vs. spaces)

Good process recognizes the difference between process and culture.  Process is for things that never change like tabs vs. spaces and are easy to measure like no empty catch blocks.  Bad process tries to control things you might change your mind about like what makes good code documentation or things that are hard to measure like code reviews.

Commandments of localization:

1. Resource all strings
2. Never concatenate strings
3. Put all punctuation in the resourced string
4. Never hard-code date, time, or currency formats
5. Never concatenate names
6. Use UTF-8 99.9999 percent of the time
7. Use dynamic layouts
8. Always use a full locale
9. Never trust the browser to know the right locale


JavaScript sucks, but that's not necessarily a bad thing 

CoffeeScript 
Closurescript 
GWT 
Dart 
Clojure 
OPA

Javascript sucks, long live JavaScript

Strongly vs. weakly typed languages and why they matter

        In the beginning there was C
        Object oriented and strongly typed languages
        C++ and Objective C
        Java
        Ruby, PHP, JavaScript and other duck typed languages
        Which way is better?
        
runtime errors vs. compile time errors


Difinitive REST guide

mobile first doesn't work

What you need to know about searching and sorting

Shovels and Bicycles - Why it's OK to make users think
        When users shouldn't have to think - Don't make me think: http://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758
        Best UI for a shovel
        Shovels vs. excavators - The pen tool
        Bicycles - Adobe Illustrator
        
        

iPad games to steal design ideas from
        Machinarium - Interactions without words
        Osmos - Visual menus
        Spell Tower - Simple Tutorials
        Osmos - Don't make people wait
        World of Goo - Give people an easy way to undo
        Morris Lessmore - Guide users through new interactions

        
A little bit of game theory

The first step is deciding what type of game you want to make.  Most games fit into one of a small set of categories:

	Board games like checkers and chess
	Arcade games like Pacman
	Puzzle games like world of Goo
	Interactive books like Morris Lessmore
	Word games likes Words with Friends and SpellTower
	

What goes into a game choosing the right scope
Designing the game
Designing characters
Planning for space
Getting started with iOS
Planning the graphics
Learning Objective-C
Choosing the framework
Memory management
Defining levels
Planning your scenes
Performance tuning
	Loading fast
	Running fast


Part 1
-----------------------

Introduction:  A simple puzzle game

The introduction explains the rules of the game and gives an overview of the project.  It also shows the total screens of the game and how the player moves from one to another.

The frameworks

The first step to understanding the game is a look into the frameworks it uses.  This section reviews UIKit, Cocos 2d, and Box2d and how they work together to make the game.
	
The fundamental pieces

After reviewing frameworks the article introduces the different pieces of the game.  It walks through the images and how they're turned into sprites and looks at some code to discuss the views, controllers, and scenes that make up the game.


Part 2
-----------------------

Moving from the simulator to a real phone

The second part of the series starts by moving the game out of the simulator and into a real phone.  This section discusses industrial design issues, memory management, and tuning the game to run well on a real phone.  It also review the process of signing up as an iOS developer.

More with less

Once game runs well we have to address some design issues.  How do you create complex levels in the small space of the phone?  Where does the game go after you've got the basics working?

Getting through the app store

The last section discusses applying for the Apple store and releasing the game.  I'm not really sure what this section will include since I haven't done it yet.

Part 3
-----------------------

There might be a third part about responding to feedback and managing new versions.  I'm not at that stage yet.



-----------------------

Understanding open source licenses

This article would compare different open source licenses.  You could contact Kerry to get help.
