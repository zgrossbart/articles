The web is just starting to use animation well.  For years, animated GIFs and Flash ruled.  Text moved and flashed, but it was never seamless.  Animations had boxes around them like YouTube videos.  HTML5 <code>canvas</code> changes everything about web animation.  

The <code>canvas</code> element makes it possible to integrate drawings and animations with the rest of your page.  You can combine them with text and make animations interactive.  This drawing mechanism is powerful, but very low-level.

Animations get more power and need less coding when you combine the <code>canvas</code> tag with higher-level libraries like <a href="http://paperjs.org/">Paper.js</a>.  This article introduces HTML5 <a href="http://paperjs.org/tutorials/animation/creating-animations/">animation</a> and walks you through creating an animation of dandelion seeds blowing in the wind.

<h3>Neat is easy, but messy is hard</h3>

Computers love clean.  They make spreadsheets, do statistics, and plot multivariate curves; they always color inside the lines.  

In the real world, even simple things are messy.  Leaves falling from trees, water splashing, all the little interactions around us feel simple because we're used to them &mdash; but little bursts of wind are actually messy and unpredictable.

For this article we'll animate dandelion seeds blowing in the breeze.  

Dandelions are tricky because we all know what they look like:  we've touched them and blown their seeds off.  Commonplace objects produce instant recognition and feelings.  I don't have to tell you what dandelions are, you just know.  Dandelions are a chaos of seeds piled on top of each other.

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/messy_seeds2.jpg" alt="" title="Messy Dandelion Seeds" width="450" height="450" class="aligncenter size-full wp-image-115537" />

Our dandelion animation will never produce the complexity of the real thing and it works better if we don't try:  make it too close to real and it feels funny.  Instead we'll create a stylized dandelion which gives you the right impression without all the details.

<a href="http://zgrossbart.github.com/Dandelion/"><img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/basic_dandelion.jpg" alt="" title="See the animation running and edit the code" width="403" height="417" class="aligncenter size-full wp-image-115484" /></a>

<h3>Paper.js</h3>

It's easy to draw simple shapes with the <code>canvas</code> tag without any special drawing libraries.  Create your <code>canvas</code>:

<pre class="brush: html">&lt;canvas id="canvas" width="300" height="300"&gt;&lt;/canvas&gt;</pre>

Then add a little JavaScript.  

<pre class="brush: javascript">
// Get our canvas
var canvas = $('#canvas')[0].getContext("2d");

// Draw a circle
canvas.beginPath();
canvas.arc(100, 100, 15, 0, Math.PI*2, true); 

// Close the path
canvas.closePath();

// Fill it in
canvas.fill();
</pre>

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/circle.png" alt="" title="Circle" width="360" height="295" class="aligncenter size-full wp-image-115485" />

<a href="http://blog.nihilogic.dk/2009/02/html5-canvas-cheat-sheet.html">Cheat sheets for canvas</a> show you the basics, but when you get into more serious drawing you'll want a higher-level library like <a href="http://paperjs.org/">Paper.js</a>.

Paper.js is a JavaScript library for drawings and animations.  It's based largely on <a href="http://scriptographer.org/">Scriptographer</a>, a scripting language for <a href="http://en.wikipedia.org/wiki/Adobe_Illustrator">Adobe Illustrator</a>.  You can <a href="http://paperjs.org/tutorials/getting-started/using-javascript-directly/">write JavaScript with Paper.js</a>, but most of the time you'll work with a JavaScript variant called PaperScript.  

Paper.js calls itself "<a href="http://paperjs.org/about/">The Swiss Army Knife of Vector Graphics Scripting</a>" and the "<a href="http://paperjs.org/features/#vector-geometry">vector</a>" part is important.  

There are two basic types of graphics, <a href="http://en.wikipedia.org/wiki/Vector_graphics">vectorized</a> and <a href="http://en.wikipedia.org/wiki/Raster_graphics">rasterized</a>.  Rasterized graphics are like the pictures you take with your camera:  big rectangles with maps denoting the color of each pixel.  Try to enlarge them and you get blurry dots.  

Vector graphics are like connect-the-dots pictures:  they're sets of lines and shapes that give instructions for how to draw your image at any size.  Using vector graphics, I can make an image like a letter Z really big and it still looks sharp.  If I turn it into a rasterized graphic by taking a picture and then blow it up, the letter gets all blurry.

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/rastervector.png" alt="" title="Raster Vs. Vector" width="402" height="181" class="aligncenter size-full wp-image-115487" />

Vector graphics libraries are perfect for animations since they make resizing, rotating, and moving objects easy.  They're also much faster, since the program has instructions for drawing each object instead of needing to figure it out.  

The <a href="http://paperjs.org/examples/">Paper.js examples page</a> shows some of the amazing things you can do with vectorized graphics.

The dandelion is a complete program and you can see it all running on the <a href="http://zgrossbart.github.com/Dandelion/">dandelion example page</a>.  There's also an edit button to change the code, see your changes running, and copy and paste the code for your site.  

<h3>Drawing our dandelion</h3>

The first step is importing our JavaScript and PaperScript files.

<pre class="brush: html">
&lt;script src="paper.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script type="text/paperscript" canvas="canvas" src="dandelion.pjs" id="script"&gt;&lt;/script&gt;
</pre>

The PaperScript code for running the animation is declared as <code>text/paperscript</code>.  Now we're ready to start drawing.

The first part of our dandelion is the stem.  The stem is a green arc with a circle on the top for the bulb.  We'll make both shapes with a <a href="http://paperjs.org/reference/path">path</a>, a list of shapes, points and lines the browser is instructed to display.

Paths are the basic building blocks of animation.  They render lines, curves, and polygons.  You can also fill them in to make complex shapes.  Our path looks like this:

<pre class="brush: javascript">
var path = new Path();
path.strokeColor = '#567e37';
path.strokeWidth = 5;

var firstPoint = new Point(0, 550);
path.add(firstPoint);

var throughPoint = new Point(75, 400);
var toPoint = new Point(100, 250);
path.arcTo(throughPoint, toPoint);
</pre>

Our path is an arc so it needs three points: the start, the end, and a midpoint to arc through.  Three points are enough to define any arc we need.  The <code>arcTo</code> function draws the line between them.  The path item also supports styling information like the stroke color and stroke width; <em>#567e37</em> and <em>5</em> make our arcing line green and thick.  Paper.js supports the same color definitions as CSS.

We can add a few more items to make it all easier to see:

<pre class="brush: javascript">
path.fullySelected = true;

var circle = new Path.Circle(throughPoint, 5); 
circle.fillColor = '#CC0000'; </pre>

Making the path fully selected will draw some lines to show us the arc; the red circle shows us where the through point is.  

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/stem_paths.png" alt="" title="stem_paths" width="360" height="295" class="aligncenter size-full wp-image-115489" />
        
The stem ends with a circle to show the bulb of the flower and give us a place to attach all the seeds.  Circles are much easier in Paper.js than in direct <code>canvas</code>.

<pre class="brush: javascript">
var bulb = new Path.Circle(toPoint, 10); 
bulb.fillColor = '#567e37'; </pre>

One line of code draws our circle, one more makes it green, and we're ready to add our seeds.
        
<h3>Drawing the seeds</h3>

Each seed has a bulb, a little stem, and a wispy part on the top.  

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/dandelionseed.jpg" alt="" title="Dandelion seed" width="450" height="450" class="size-full wp-image-115490" />
        
Our seed starts with a small oval for the bulb and an arc for the stem.  The oval is a rectangle with rounded corners:

<pre class="brush: javascript">
var size = new Size(4, 10);
var rectangle = new Rectangle(p, size);
var bottom = new Path.Oval(rectangle);
bottom.fillColor = '#d0aa7b';
</pre>

The seed stem is another arc, but this one is much thinner than the flower stem:

<pre class="brush: javascript">
var stem = new Path();
stem.strokeColor = '#567e37';
stem.strokeWidth = 1;
stem.add(new Point(p.x + 2, p.y));

var throughPoint = new Point(p.x + 4, p.y - height / 2); 
var toPoint = new Point(p.x + 3, p.y - height); 
stem.arcTo(throughPoint, toPoint); </pre>

The wisps are more arcs with a circle at the end of each line.  Each seed has a random number of wisps which start at the top of the stem arc and curve out in different directions.  Randomness makes them look a little bit messy and so more natural.  Each seed gets a random number of wisps between four and 10.  

<pre class="brush: javascript">
for (var i = 0; i < random(4, 10); i++) {
    path = new Path();
    path.strokeColor = '#fff3c9';
    path.strokeWidth = 1;
    
    var p1 = new Point(p.x, p.y);
    path.add(new Point(p1.x + 2, p1.y + 2));
    
    // Each flutter extends a random amount up in the air
    var y = random(1, 5);
    
    // We draw every other stem on the right or the left so they're
    // spaced out in the seed.
    if (i % 2 == 0) {
        throughPoint = new Point(p1.x + random(1, 3), p1.y - y);
        toPoint = new Point(p1.x + random(5, 35), p1.y - 20 - y);
    } else {
        throughPoint = new Point(p1.x - random(1, 3), p1.y - y);
        toPoint = new Point(p1.x - random(5, 35), p1.y - 20 - y);
    }
    
    path.arcTo(throughPoint, toPoint);
    
    // Now we put the circle at the tip of the flutter.
    circle = new Path.Circle(toPoint, 2);
    circle.fillColor = '#fff3c9';
}
</pre>

Now that we've drawn the seed, we need to manage it; later we'll want to move and rotate it.  The seed is made up of a lot of parts and we don't want to manage each one separately.  Paper.js has a nice <a href="http://paperjs.org/reference/group">group</a> object.  Groups associate a set of objects together so we can manipulate them all at once.  

<pre class="brush: javascript">
var group = new Group();
group.addChild(bottom);
group.addChild(stem);

this.group = group;
</pre>

The last step is packaging our seed into a reusable object called <code>Seed</code>.  We add all the code we've been writing to a new function with the name <code>Seed</code> and add a function to create the initial variables.  This examples calls that function <code>create</code>, but you can name it anything you want.

<pre class="brush: javascript">
function Seed() {

    this.create = function (/*Point*/ p, /*boolean*/ shortStem) {
    ...
</pre>

The <code>create</code> function draws the seed at the specified <a href="http://paperjs.org/reference/point">Point</a> and the <code>shortStem</code> boolean tells us if this is a short stem or not.  We'll look at short-stemmed seeds a little more later. 

These types of functions don't work as <a href="http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)">constructors</a> in JavaScript, but are supported in PaperScript.

<pre class="brush: javascript">
var seed = new Seed()
seed.create(new Point(100, 100), false); </pre>

Our seeds look like this when we draw them.

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/seed.png" alt="" title="Dandelion seed" width="360" height="295" class="aligncenter size-full wp-image-115488" />
        
The <code>Seed</code> object draws our random dandelion seeds.  Now we can add them to our flower.
        
<h3>Adding a little chaos</h3>

The seeds look better when we space them out around the circle of our dandelion bulb to feel like a halo of seeds.  The bulb is a circle and the circle is a path, so we can get each point on the path.  

<pre class="brush: javascript">
var bulb = new Path.Circle(toPoint, 10); bulb.fillColor = '#567e37';
    
var angle = 360 / bulb.length;
var seeds = [];

for (var i = 0; i < bulb.length; i++) {
    var seed = new Seed()
    seed.create(bulb.getPointAt(i));
    
    // Rotate each seed so it points out from the bulb
    seed.rotate(i * angle);
    seeds.push(seed);
}
</pre>

This makes a circle of seeds around the bulb, but leaves a space in the middle.  We'll add a few more seeds to fill in the center.  We give the center seeds short stems so they show the white of the wisps more than the beige of the stems.

<pre class="brush: javascript">
for (var i = 0; i < 18; i++) {
    var seed = new Seed()
    var point = new Point(toPoint.x + random(-3, 3),
                          toPoint.y + random(-3, 3));
    seed.create(new Point(toPoint), true);
    seed.rotate(random(0, 360));
    seeds.push(seed);
}
</pre>

The seeds in the middle bunch randomly and make our dandelion look nicely messy.  Now we can make them blow off.

<h3>Animating the seeds</h3>

Wind pushes seeds in complex patterns and two seeds will never blow off the same way.  We want to make them look real, so we need a little more randomness.

Reproducing real wind is much too complicated, so we make seeds float off in a random-looking pattern.  Each seed is assigned a random point on the right side of the screen as a final destination:

<pre class="brush: javascript">
this.dest = new  Point(1800, random(-300, 1100)); </pre>

The <code>rotateMove</code> function pushes each seed toward its destination point and rotates it.  We can work with our Seed object as a group to rotate and move it with one function.  

<pre class="brush: javascript">
this.rotateMove = function(/*int*/ angle) {
    if (this.group.position.x < 850 && this.group.position.y < 650) {
        var vector = this.dest - this.group.position;
        this.group.position += vector / 150;
    
        this.angle += angle;
        this.group.rotate(angle);
    } else {
        this.isOffScreen = true
    }
}
</pre>

This function moves the seed until it's off the screen.  Calling <code>rotateMove</code> for each frame of our animation will make the seed float across the screen.  

Paper.js gives us an easy way to make animations with the <code>onFrame</code> function; we implement <code>onFrame</code> and Paper.js calls it for every frame of our animation.  With each frame we iterate over each seed and move it across the screen.

<pre class="brush: javascript">
function onFrame(event) {
    for (var i = 0; i < seedCount; i++) {
        if (!seeds[i].isOffscreen()) {
            seeds[i].rotateMove(random(2, 4));
        }
    }
}
</pre>

The seeds slide and rotate a little closer to the destination point with each frame of the animation.  Starting all of the seeds at the same point and ending them far apart makes them space out nicely as they move.  

<img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/dandelion_seed_offscreen2.png" alt="" title="Dandelion seeds offscreen" width="535" height="404" class="aligncenter size-full wp-image-115494" />
        
We don't want all the seeds to fall off at once, so we use a timer to make them drift away.

<pre class="brush: javascript">
function start() {
    var id = setInterval(function() {
        seedCount++;
        if (seedCount === seeds.length) {
            clearInterval(id);
        }
    }, 1000);
}
</pre>

The timer waits for one second before releasing the next seed, giving our dandelion a nice floaty feel.  
        
Some green grass and blue sky as a background image for our <code>canvas</code> puts it all in context.  Now we have a dandelion with seeds floating on the breeze.

<a href="http://zgrossbart.github.com/Dandelion"><img src="http://mcoding.smashingmagazine.com/wp-content/uploads/2011/10/dandelion.jpg" alt="" title="See the animation running and edit the code" width="612" height="369" class="aligncenter size-full wp-image-115491" /></a>
        
See the dandelion running <a href="http://zgrossbart.github.com/Dandelion/">here</a>.  You can edit and run the source code as part of the animation or download it from the <a href="https://github.com/zgrossbart/Dandelion">dandelion GitHub page</a>.

<h3>Paper.js in the real world</h3>

Paper.js has some impressive examples and a nice coding model, but you should know a few gotchas before using it on your site.

<h4>It doesn't work in old browsers</h4>

All Paper.js drawings use the <code>canvas</code> tag and require HTML5.  That means you need Internet Explorer 9+, Firefox 4+, Safari 5+, or Chrome.  If your site must support older browsers you can't use <code>canvas</code>.

There's no way around this requirement; if you need older browsers you're out of luck.  As the Paper.js site says, "<a href="http://paperjs.org/about/#browser-support">Let's go forward!</a>".

<h4>Performance can be slow</h4>

Paper.js can make your browser grind to a halt even if it supports HTML5.  Pixar renders Buzz and Woody on giant server farms &mdash; all you get is your user's cheap MacBook.

Not only are laptops slower than server clusters, but browsers make things worse by rendering the <code>canvas</code> tag with the <a href="http://en.wikipedia.org/wiki/CPU">CPU</a> instead of the <a href="http://en.wikipedia.org/wiki/GPU">GPU</a>.  Games like Halo and Rage take advantage of the graphics processor on your video card to render rocket launchers and mutants.  The CPU is less efficient with graphics, so the same computer that handles complex video games smoothly can make floating dandelion seeds look slow and jerky.

Make sure you test all of your animations with slower hardware and watch the CPU usage.  Use groups to minimize the calculations, and be very careful about what you do in each invocation of the <code>onFrame</code> function.

<h4>Mobile devices are slower</h4>

Mobile performance problems are even worse.  Most mobile devices support <code>canvas</code>, but they are mostly too slow to render <code>canvas</code> animations well.  Even more powerful devices like the iPad 2 can't handle the dandelion seeds smoothly.  

<h4>It doesn't support object-level events</h4>

Other drawing libraries, like SVG (see below), support object-level mouse and keyboard events.  Those events make it easy to respond when a path or a polygon is clicked, hovered over, or touched.  

The <code>canvas</code> tag doesn't support object-level events.  Paper.js has some basic functionality for <a href="http://paperjs.org/examples/hit-testing/">hit testing</a>, but it's very low-level.  You can listen for <a href="http://paperjs.org/tutorials/interaction/mouse-tool-events/">mouse</a> and <a href="http://paperjs.org/tutorials/interaction/keyboard-interaction/">keyboard</a> events on the whole canvas, but you'll need to handle mapping those events to individual controls.


<h3>What about <a href="http://en.wikipedia.org/wiki/SVG">SVG</a>?</h3>

The <a href="http://en.wikipedia.org/wiki/SVG">SVG</a> (Scalable Vector Graphics) specification was defined over 10 years ago, but came to the forefront with support libraries like <a href="http://raphaeljs.com/">Rapha&euml;l.js</a>, which make it easy to generate SVG images with JavaScript.  SVG is powerful, works well for smaller images, and is supported all the way back to Internet Explorer 7 with conversion to <a href="http://en.wikipedia.org/wiki/VML">VML</a> (Vector Markup Language).  SVG is the best choice if you need to support older browsers.

The real issues with SVG are speed, future support, and mobile devices.  Every browser is actively working on making <code>canvas</code> faster.  Safari 5 already offers hardware acceleration with the GPU for <code>canvas</code> and the rest are working on it.  SVG is also unsupported on Android devices.

There's a growing community around <code>canvas</code>, the new technology the vendors are focusing on.  They're adding new features, fixing bugs, and making it better every day.

<h3>Other Canvas drawing libraries</h3>

Paper.js isn't the only option for <code>canvas</code>.  <a href="http://processingjs.org/">Processing.js</a>, from <a href="http://ejohn.org/">the creator of JQuery</a>, ports the <a href="http://en.wikipedia.org/wiki/Processing_(programming_language)">Processing</a> programming language to JavaScript.  They support animations and provide <a href="http://processingjs.org/exhibition">many examples</a>.

The <a href="https://github.com/mrdoob/three.js/">three.js</a> engine supports <code>canvas</code> and the <a href="http://en.wikipedia.org/wiki/Webgl">WebGL</a> library, and focuses more on 3D drawings.  <a href="http://www.dartlang.org/">Google Dart</a> will also support <code>canvas</code> with built-in rendering objects. 

Paper.js is a mature library with a very supportive community on the <a href="http://groups.google.com/group/paperjs">Paper.js Google Group</a>, and many impressive and well-documented examples.  Check out some of the amazing things people are doing with it.

<h3>More Paper.js examples</h3>

Our dandelion is just the beginning.  Here are a few other impressive animations written in Paper.js.

Paper.js has a page full of <a href="http://paperjs.org/examples/">incredible examples</a>.  <a href="http://paperjs.org/examples/voronoi/">Voronoi</a> is one of the best.  Make sure to press the space bar and see the paths.  They have more in their <a href="https://github.com/paperjs/paper.js/tree/master/examples">GitHub examples folder</a>.  

Ricardo S&aacute;nchez shares his jellyfish on <a href="http://nardove.com/">http://nardove.com/</a> which also has a koi pond written with Processing.js.  Wait a minute, the jellies are shy.

Andrew Berg created a <a href="http://barbariangroup.com/posts/8960-a_node_garden_in_paper_js">Node Garden in Paper.js</a>.

<a href="http://zgrossbart.github.com/hborecycling/">The HBO Recycling Program</a> infographic I created uses Paper.js to show how often different HBO series use the same actors.

Paper.js also helped me create the interactive tutorial <a href="http://zgrossbart.github.com/touch_gestures/">20 Multi-Touch Gestures You Should Learn Today</a>.

Where's your Paper.js amazingness?


The first <a href="http://commons.wikimedia.org/wiki/File:Taraxacum_seed_3.jpg">dandelion seed photograph</a> in this article was created by <a href="http://commons.wikimedia.org/wiki/User:Arnoldius">Arnoldius</a>.

The second <a href="http://commons.wikimedia.org/wiki/File:Dandelionseed.JPG">dandelion seed photograph</a> in this article was created by <a href="http://commons.wikimedia.org/wiki/User:Hmbascom">Hmbascom</a>.
