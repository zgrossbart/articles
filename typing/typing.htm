Strongly typed languages are the best because they keep you out of trouble.  Weakly typed languages are the best because they let you get your work done faster.  The debate between strongly and weakly typed languages rages on, but it all started with C.

C treats everything like a number.  A character is just the number representing it and true and false are just 1 and 0.  Representing everything as a number make it easier to assign values into computer memory.

C does define variables with types like <code>int</code> for integer or <code>char</code> for character, but that just defines how much memory to use for the variable.  When I want to access the variable and print it out I need to know what type it is.

<pre class="brush: javascript"> int a = 1;
printf("int: %i\n", a);

char z = 'z';
printf("char: %c\n", z);
</pre>

The <code>printf</code> function in C needs special formatting know how to display number different from characters because it doesn't know what the type of each variable is.  If I change the last line to 

<pre class="brush: javascript">char z = 'z';
printf("char: %i\n", z);
</pre>

Then I get the number code <code>122</code> instead of the letter <code>z</code>.  C doesn't know if <code>z</code> is a character or an integer, it has a weak type.

Weak typing is fast since there no overhead of remembering types, but it leads to some nasty bugs.  If you don't know what the variable <code>z</code> is then there's no way to know how to format it.  Imagine you access a variable and get the number <code>1229799107</code>.  The number could be the result of a mathematical calculation (1,229,799,107), the cost of a government program ($1.2 billion) or a time stamp (Saturday, 20 Dec 2008).  When all you have is the number there's no way to know that it's really the number codes for the letters in my name: <code>zack</code>.

Confusion over types gets worse with larger projects.  Without a strong process to enforce documentation the code's impossible to follow or debug.

The frustration over these issues inspired the invention of static typing.

<h3>Static typed languages - C++ and Objective-C</h3>

The next programing languages used a subset of the C functionality and strict guidelines to improve the loose nature of the language.  C++ and Objective-C compile into the same bytes as C, but they use the compiler to restrict the code you can write.  

In C++ and Objective-C our number (1229799107) has a meaning.  I can define it as a string of characters and make sure that nobody tries to use it as a currency or a date.  The compiler enforces that it's used properly, but 

Static typing supports objects with sets of functionality that always work in a well defined way.  Now I can create a <code>Person</code> object and make sure the <code>getName</code> function always returns the string of someone's name.

<pre class="brush: javascript">class Person {
    public:
        string getName() {
            return "zack";
        }
};
</pre>

Now I can call my object like this:

<pre class="brush: javascript">Person p;
printf("The name is %s\n", p.getName().c_str());
</pre>

Static typing goes a long way to avoid the bugs from weakly typed languages, but it can't check anything when the program is running since a C++ or Objective-C program is just like C code when it runs.  They also left the option of mixing weakly typed C code with static typed C++ or Objective-C to bypass all of the type checking.
  
Java went a step beyond that to add type checking when the code runs.

<h3>Strongly typed languages - Java</h3>

C++ offers you some stricter ways of using C, Java makes sure you use them.  Java needs everything defined so you know at all times what type of object you have, which functions that object has and if you're calling them properly. 

Java also stopped supporting C code and the other ways of getting out of strong typing.

The <code>Person</code> object looks almost the same in Java.

<pre class="brush: javascript">public class Person {
    public String getName() {
        return "zack";
    }
}
</pre>

I get the name by creating a new object and calling the <code>getName</code> function like this:

<pre class="brush: javascript">public class Main {
    public static void main (String args[]) {
        Person person = new Person();
        System.out.println("The name is " + person.getName());
    }
}
</pre>

This code creates a new <code>Person</code> object, assigns it to a variable named <code>person</code>, calls the <code>getName</code> function and prints out the value.  I don't need a formatter string like <code>%s</code> because Java gave everything a <code>toString</code> function.  

If I try to assign my <code>person</code> variable to a different type like a character or an integer the Java compiler will show an error that these are incompatible types.  If I was calling a separate API which had changed since I compiled the Java runtime would still find the type error.  

Java also requires every piece of code be contained within a well defined class.  It's a big part of the reason why people complain Java forces you to write too much boiler plate.

Strong typing has a few advantages over static typing, but the philosophy is the same:  you must specify the type of an object when you write the code.

<h3>Duck type languages - JavaScript, Python, Ruby, PHP and many others</h3>

Weakly typed languages don't do any type checking, strongly typed languages always do, dynamic languages split the difference.  In JavaScript I define a variable with the keyword <code>var</code> instead of a type like <code>int</code>, or <code>char</code>.  I don't know the type of this variable and I don't need to until I actually want to access it.

I can define an object in JavaScript with the <code>getName</code> function.

<pre class="brush: javascript">var person = {
    getName: function() {
        return 'zack';
    }
};

alert('The name is ' + person.getName());
</pre>

Now I have an object named assigned to the variable <code>person</code> and it has a function named <code>getName</code>.  If I call <code>person.getName()</code> it will result in <code>zack</code>.  

I declared <code>person</code> as a <code>var</code> and I can reassign it to anything.  It's variable.

<pre class="brush: javascript">var person = {
    getName: function() {
        return 'zack';
    }
};

person = 5;

alert('The name is ' + person.getName());
</pre>

This code creates a variable name <code>person</code> and assigns it to an object with a <code>getPerson</code> function, but then it reassigns that variable to the number 5.  When this code runs the result is <code>TypeError: Object 5 has no method 'getName'</code>.  JavaScript says that the object <code>5</code> doesn't have a function named <code>getName</code>.  In Java this error would come up during compilation, but JavaScript makes you wait for runtime.  

I can also change the type of the object based on the conditions of the program.  Java would call this a type error, but it's fine in JavaScript:

<pre class="brush: javascript">var person = {
    getName: function() {
        return 'zack';
    }
};

if (new Date().getMinutes() > 29) {
    person = 5;
}

alert('The name is ' + person.getName());
</pre>

Now this code will work at 9:15, but will fail at 9:30.  

They call this duck typing because the code looks at the object during runtime to determine what it is and if it walks like a duck and quacks like a duck then it must be a duck.  

C shows errors when the program runs.  C++, Objective-C and Java use the compiler to catch errors at compile time.  JavaScript pushed those errors back to the run time of the application.  That's why the strongly typed people hate JavaScript so much.  It looks like a big step backward.

<h3>Each one excels where the other fails</h3>

I recently needed a program to find a place in a specific XML file, make a small change and save the file.  On a team of Java coders I wrote the code in the dynamically typed language Python.  

<pre class="brush: python">import sys
import string
from xml.dom.minidom import parse

dom = parse(sys.argv[1])

for node in dom.getElementsByTagName('property'):
    attr = node.attributes['name'];
    if attr.value == 'my value':
        node.childNodes[0] = dom.createTextNode('my new value');

file = open(sys.argv[1], 'w');
file.write(dom.toxml('UTF-8'));
file.close();
</pre>

This program finds every property node with the name <code>my value</code> and sets the contents to <code>my new value</code>.  I define the variables <code>dom</code> for my XML document, <code>node</code> for the each node of XML I find and <code>attr</code> for the attribute.  Python doesn't even require the keyword <code>var</code>.  It doesn't know that <code>node</code> has <code>childNodes</code> or <code>attr</code> has <code>value</code> until I call it.

To change an XML file in Java I would write a new class, open an input stream, call the DOM parser, traverse the tree, call the right methods on the right elements, and write the file out to an output stream.  All of the extra definition of objects and variables could easily take a hundred lines.  Python took 14.

Dynamic code is generally shorter than static code.  The program would be shorter in PHP than C++ or in Ruby than Objective-C.  

Fewer lines of code means less bugs.  I write the program faster and debug it just as quickly.  Strongly typed languages are a terrible solution for 14 line programs.  They keep you out of trouble that you'll never have in 14 lines of code, but it's tricky to find the tipping point.

Dynamic language projects can't grow past a certain size without process to keep them in control.  Some teams require extra comments and others use additional tools to restrict the language to avoid type errors.

Engineers that worked in C spent years tearing their hair out over type conversion errors, corrupt values, and the terrible bugs that come from small typos.  They've been burnt and learned that the compiler helps them stay out of trouble.  The more complex the software the more trouble it causes.

That's the tradeoff between the two paradigms.  Strongly typed languages make the program more difficult to write, but easier to maintain.  Dynamic languages are easy to write, but make things more difficult to maintain.  It's all about where you want to spend your time.
